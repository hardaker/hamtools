#!/usr/bin/perl

our $VERSION = '0.5';

my $havehamlib = 
  eval {
      require Hamlib;
  };
Die("You need to intsall the Hamlib perl module before continuing ($@)")
  if (!$havehamlib);

import Hamlib;
use Time::HiRes qw(usleep gettimeofday tv_interval);

$| = 1;

my %opts =
  (t => 1,
   u => .07);

#
# read the command line options (and provide help output)
#
LocalGetOptions(\%opts,
		["GUI:separator",   "Hamlib Controls:"],
		["P|port=s",        "Port to use (/dev/ttyS0)"],
		["M|model=s",         "Rig model (eg 122)"],
		["S|speed=s",       "serial speed (eg 38400)"],

		["GUI:separator",   "Output Controls:"],
		["t|sleep-time=s",  "Time between measurements (in second)"],
		["e|every-step",    "Record every interval, not just on signal level changes"],
		["m|min-level=s",   "minimum level to record"],
		["u|min-sleep=s",   "minimum sleep between frequency changes"],
		["f|freq-scan=s",   "frequency-scan the specified X-Y-STEP range"],
	       );

die("No rig model set; -M, -P and -S are mandatory") if (!exists($opts{'M'}));
die("No rig serial port set; -M, -P and -S are mandatory") if (!exists($opts{'P'}));
die("No rig serial rate; -M, -P and -S are mandatory") if (!exists($opts{'S'}));

######################################################################
# initialize hamlib
#
# initialize the rig connection
Hamlib::rig_set_debug(1);
our $rig = new Hamlib::Rig($opts{'M'});
$rig->set_conf("rig_pathname", $opts{'P'});
$rig->set_conf("serial_speed",$opts{'S'});
$rig->open();

# start recording
my $lastfreq = $rig->get_freq();
my $lastsetfreq;
my $lastlevel = -999;

# catch sigterm for closing
$SIG{INT} = \&endit;

# print the opening XML
print "<?xml version=\"1.0\" encoding=\"utf-8\"?>
<signals>
  <signal frequency=\"$lastfreq\">
";

my ($upperfreq, $lowerfreq, $stepfreq);
if ($opts{'f'}) {
    ($lowerfreq, $upperfreq, $stepfreq) = split(/-/,$opts{'f'});
    $stepfreq = .005 if (!$stepfreq);
    $lastsetfreq = $lowerfreq-$stepfreq;
}

my $closed = 0;

sub close_out {
    print "  </signal>\n" if (!$closed);
    print "</signals>\n";
    exit;
}

$SIG{'INT'} = \&close_out;
$SIG{'PIPE'} = \&close_out;


while (1) {
    my $freq;

    if ($lowerfreq) {
	$freq = $lastsetfreq + $stepfreq;
	if ($freq > $upperfreq) {
	    $freq = $lowerfreq;
	}
	$rig->set_freq($freq * 1000000);
	$lastsetfreq = $freq;
    } else {
	$freq = $rig->get_freq();
    }

    my $value = $rig->get_level_i($Hamlib::RIG_LEVEL_STRENGTH);
    my $time = [gettimeofday];

    if ($lastfreq ne $freq) {

	if (defined($opts{'u'})) {
	    usleep($opts{'u'} * 1000000) ;
	    $value = $rig->get_level_i($Hamlib::RIG_LEVEL_STRENGTH);
	}
	
	if (!$closed) {
	    # record it anyway for changing
	    print "    <record level=\"$value\" secs=\"$time->[0]\" usecs=\"$time->[1]\" />\n";

	    # Change signal frequency in output
	    print "  </signal>\n";
	    $closed = 1;
	}

	$lastfreq = $freq;
    }

    if ((!defined($opts{'m'}) ||
	 $value > $opts{'m'} || $lastvalue > $opts{'m'}) &&
	($opts{'e'} || $lastlevel ne $value)) {

	if ($closed) {
	    print "  <signal frequency=\"$freq\">\n";
	    $closed = 0;
	}

	print "    <record level=\"$value\" secs=\"$time->[0]\" usecs=\"$time->[1]\"/>\n";
    }
    $lastlevel = $value;
    usleep($opts{'t'} * 1000000);
}


sub endit {
    print "  </signal>
</signals>
";
    exit;
}

#######################################################################
# Getopt::GUI::Long portability wrapper
#
sub LocalGetOptions {
    if (eval {require Getopt::GUI::Long;}) {
	import Getopt::GUI::Long;
	# optional configure call
	Getopt::GUI::Long::Configure(qw(display_help no_ignore_case
					capture_output));
	return GetOptions(@_);
    }
    require Getopt::Long;
    import Getopt::Long;
    # optional configure call
    Getopt::Long::Configure(qw(auto_help no_ignore_case));
    my $ret = GetOptions(LocalOptionsMap(@_));
    if ($opts{'h'}) {
	print STDERR "You need to install the perl Getopt::GUI::Long perl module to get help output;\n";
	exit 1;
    }
    return $ret;
}

sub LocalOptionsMap {
    my ($st, $cb, @opts) = ((ref($_[0]) eq 'HASH')
			    ? (1, 1, $_[0]) : (0, 2));
    for (my $i = $st; $i <= $#_; $i += $cb) {
	if ($_[$i]) {
	    next if (ref($_[$i]) eq 'ARRAY' && $_[$i][0] =~ /^GUI:/);
	    push @opts, ((ref($_[$i]) eq 'ARRAY') ? $_[$i][0] : $_[$i]);
	    push @opts, $_[$i+1] if ($cb == 2);
	}
    }
    push @opts,"h|help";
    return @opts;
}

=pod

=head1 NAME

signalrecord - record signal levels from a device with a CAT interface

=head1 SYNOPSIS

signalrecord ... > foo.xml

=head1 DESCRIPTION

I<signalrecord> performs one simple task: records various signals from
a CAT controled device for later analysis.

The output is in XML format and printed to stdout.  The output looks
something like this:

  <?xml version="1.0" encoding="utf-8"?>
  <signals>
    <signal frequency="155235000">
      <record level="-54" secs="1220885498" usecs="368219"/>
      <record level="-54" secs="1220885499" usecs="389415"/>
      <record level="-54" secs="1220885500" usecs="400090"/>
      <record level="-54" secs="1220885501" usecs="416175"/>
    </signal>
  </sinals>

If the frequency changes, usually due to the -f flag specifying a
range, then multiple <signal> tags will be present and the order will
be based on when changes happen.

Once the data has been recorded, you can use signalcount or sig2kml to
generate bar-chart graphs or maps.

=head1 USAGE

=head1 OPTIONS

=head2 Hamlib Controls (required):

=item  -P STRING

=item  --port=STRING

Port to use (/dev/ttyS0)

=item  -M STRING

=item  --model=STRING

Rig model (eg 122)

=item  -S STRING

=item  --speed=STRING

serial speed (eg 38400)

=head2 Output Controls:

=item  -t STRING

=item  --sleep-time=STRING

Time between measurements (in second)

=item  -e

=item  --every-step

Record every interval, not just on signal level changes

=item  -m STRING

=item  --min-level=STRING

minimum level to record

=item  -u STRING

=item  --min-sleep=STRING

minimum sleep between frequency changes

=item  -f STRING

=item  --freq-scan=STRING

frequency-scan the specified X-Y-STEP range

=head2 HELP Options

Help Options:
   -h                    Display help options -- short flags preferred
  --help                 Display help options -- long flags preferred
  --help-full            Display all help options -- short and long
  --gui                  Display a help GUI
  --no-gui               Do not display the default help GUI

=head1 SEE ALSO

signalcount(1), sig2kml(1)

=head1 COPYRIGHT and LICENSE

Copyright 2009-2011 Wes Hardaker.  All rights reserved.

License: GPLv2

=head1 AUTHOR

Wes Hardaker < wes ATTA ws6z DT com >

=cut

